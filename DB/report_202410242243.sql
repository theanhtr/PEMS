--
-- Script was generated by Devart dbForge Studio for MySQL, Version 10.0.225.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 10/24/2024 10:43:06 PM
-- Server version: 8.0.39
--

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

--
-- Set SQL mode
--
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8mb4';

--
-- Set default database
--
USE report;

--
-- Drop procedure `Proc_AllTable_Count`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_Count;

--
-- Drop procedure `Proc_AllTable_Delete`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_Delete;

--
-- Drop procedure `Proc_AllTable_DeleteList`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_DeleteList;

--
-- Drop procedure `Proc_AllTable_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetAll;

--
-- Drop procedure `Proc_AllTable_GetAllByColumnName`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetAllByColumnName;

--
-- Drop procedure `Proc_AllTable_GetByCode`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetByCode;

--
-- Drop procedure `Proc_AllTable_GetById`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetById;

--
-- Drop procedure `Proc_AllTable_GetListByColumnValues`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetListByColumnValues;

--
-- Drop procedure `Proc_Report_Filter`
--
DROP PROCEDURE IF EXISTS Proc_Report_Filter;

--
-- Drop procedure `Proc_Report_Insert`
--
DROP PROCEDURE IF EXISTS Proc_Report_Insert;

--
-- Drop procedure `Proc_Report_Update`
--
DROP PROCEDURE IF EXISTS Proc_Report_Update;

--
-- Drop table `report`
--
DROP TABLE IF EXISTS report;

--
-- Set default database
--
USE report;

--
-- Create table `report`
--
CREATE TABLE report (
  ReportId char(36) NOT NULL,
  ProvinceId int DEFAULT NULL,
  ProvinceName varchar(255) DEFAULT NULL,
  DistrictId int DEFAULT NULL,
  DistrictName varchar(255) DEFAULT NULL,
  WardId int DEFAULT NULL,
  WardName varchar(255) DEFAULT NULL,
  Address varchar(255) DEFAULT NULL,
  CropStateId int DEFAULT NULL,
  PestLevelId int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(255) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ReportName varchar(255) DEFAULT NULL,
  ReportDate datetime DEFAULT NULL,
  ModifiedBy varchar(255) DEFAULT NULL,
  PRIMARY KEY (ReportId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create procedure `Proc_Report_Update`
--
CREATE PROCEDURE Proc_Report_Update (IN v_ReportId char(36), IN v_ProvinceId int, IN v_ProvinceName varchar(255), IN v_DistrictId int, IN v_DistrictName varchar(255), IN v_WardId int, IN v_WardName varchar(255), IN v_Address varchar(255), IN v_CropStateId int, IN v_PestLevelId int, IN v_ModifiedDate datetime, IN v_ModifiedBy varchar(255), IN v_ReportName varchar(255), IN v_ReportDate datetime, IN v_id char(36))
SQL SECURITY INVOKER
COMMENT 'Procedure cập nhật thông tin dự đoán.'
BEGIN
  UPDATE report p
  SET p.ReportId = v_ReportId,
      p.ProvinceId = v_ProvinceId,
      p.ProvinceName = v_ProvinceName,
      p.DistrictId = v_DistrictId,
      p.DistrictName = v_DistrictName,
      p.WardId = v_WardId,
      p.WardName = v_WardName,
      p.Address = v_Address,
      p.CropStateId = v_CropStateId,
      p.PestLevelId = v_PestLevelId,
      p.ModifiedDate = v_ModifiedDate,
      p.ModifiedBy = v_ModifiedBy,
      p.ReportName = v_ReportName,
      p.ReportDate = v_ReportDate
  WHERE p.ReportId = v_id;
END
$$

--
-- Create procedure `Proc_Report_Insert`
--
CREATE PROCEDURE Proc_Report_Insert (IN v_ReportId char(36), IN v_ProvinceId int, IN v_ProvinceName varchar(255), IN v_DistrictId int, IN v_DistrictName varchar(255), IN v_WardId int, IN v_WardName varchar(255), IN v_Address varchar(255), IN v_CropStateId int, IN v_PestLevelId int, IN v_CreatedDate datetime, IN v_CreatedBy varchar(255), IN v_ReportName varchar(255), IN v_ReportDate datetime)
SQL SECURITY INVOKER
COMMENT 'Procedure thêm báo cáo.'
BEGIN
  INSERT INTO report (ReportId, ProvinceId, ProvinceName, DistrictId, DistrictName, WardId, WardName, Address, CropStateId, PestLevelId, CreatedDate, CreatedBy, ReportName, ReportDate, ModifiedDate)
    VALUES (v_ReportId, v_ProvinceId, v_ProvinceName, v_DistrictId, v_DistrictName, v_WardId, v_WardName, v_Address, v_CropStateId, v_PestLevelId, v_CreatedDate, v_CreatedBy, v_ReportName, v_ReportDate, v_CreatedDate);
END
$$

--
-- Create procedure `Proc_Report_Filter`
--
CREATE PROCEDURE Proc_Report_Filter (IN v_ProvinceId int, IN v_DistrictId int, IN v_WardId int, IN v_PageSize int, IN v_PageNumber int, IN v_ReportName varchar(255), IN v_ReportStartDate datetime, IN v_ReportEndDate datetime)
SQL SECURITY INVOKER
COMMENT 'Procedure lọc thông tin báo cáo theo điều kiện và trả về tổng số lượng.'
BEGIN
  DECLARE startIndex int;
  SET startIndex = (v_PageNumber - 1) * v_PageSize;

  -- Truy vấn dữ liệu với phân trang
  SELECT
    *
  FROM report p
  WHERE (v_ProvinceId IS NULL
  OR v_ProvinceId = -1
  OR p.ProvinceId = v_ProvinceId)
  AND (v_DistrictId IS NULL
  OR v_DistrictId = -1
  OR p.DistrictId = v_DistrictId)
  AND (v_WardId IS NULL
  OR v_WardId = -1
  OR p.WardId = v_WardId)
  AND (v_ReportName IS NULL
  OR v_ReportName = ''
  OR p.ReportName LIKE v_ReportName)
  AND (v_ReportStartDate IS NULL
  OR v_ReportEndDate IS NULL
  OR (p.ReportDate >= v_ReportStartDate
  && p.ReportDate <= v_ReportEndDate))
  LIMIT startIndex, v_PageSize;

  -- Truy vấn tổng số lượng bản ghi
  SELECT
    COUNT(*) AS Total
  FROM report p
  WHERE (v_ProvinceId IS NULL
  OR v_ProvinceId = -1
  OR p.ProvinceId = v_ProvinceId)
  AND (v_DistrictId IS NULL
  OR v_DistrictId = -1
  OR p.DistrictId = v_DistrictId)
  AND (v_WardId IS NULL
  OR v_WardId = -1
  OR p.WardId = v_WardId)
  AND (v_ReportName IS NULL
  OR v_ReportName = ''
  OR p.ReportName LIKE v_ReportName)
  AND (v_ReportStartDate IS NULL
  OR v_ReportEndDate IS NULL
  OR (p.ReportDate >= v_ReportStartDate
  && p.ReportDate <= v_ReportEndDate))
  ;
END
$$

--
-- Create procedure `Proc_AllTable_GetListByColumnValues`
--
CREATE PROCEDURE Proc_AllTable_GetListByColumnValues (IN `tableName` varchar(255), IN `columnName` varchar(255), IN `values` text)
SQL SECURITY INVOKER
COMMENT 'Procedure lấy ra danh sách bản ghi theo một chuỗi các giá trị của một trường.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName, ' entity WHERE entity.', columnName, ' IN (', `values`, ')');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetById`
--
CREATE PROCEDURE Proc_AllTable_GetById (IN `tableName` varchar(255), IN `tableId` varchar(255), IN `id` char(36))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy một bản ghi theo id.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName, ' entity WHERE entity.', tableId, ' = \'', id, '\'');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetByCode`
--
CREATE PROCEDURE Proc_AllTable_GetByCode (IN `tableName` varchar(255), IN `tableCode` varchar(255), IN `code` varchar(20))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy bản ghi theo mã code.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName, ' entity WHERE entity.', tableCode, ' = \'', code, '\'');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetAllByColumnName`
--
CREATE PROCEDURE Proc_AllTable_GetAllByColumnName (IN `tableName` varchar(255), IN `columnName` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy tất cả bản ghi của một bảng nhưng chỉ lấy một cột.'
BEGIN
  SET @query = CONCAT('SELECT ', columnName, ' FROM ', tableName);
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetAll`
--
CREATE PROCEDURE Proc_AllTable_GetAll (IN `tableName` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy tất cả bản ghi trong 1 bảng.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName);
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_DeleteList`
--
CREATE PROCEDURE Proc_AllTable_DeleteList (IN `tableName` varchar(255), IN `tableId` varchar(255), IN `ids` text)
SQL SECURITY INVOKER
COMMENT 'Procedure xóa nhiều bản ghi theo id.'
BEGIN
  SET @query = CONCAT('DELETE FROM ', tableName, ' WHERE ', tableId, ' IN (', ids, ')');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_Delete`
--
CREATE PROCEDURE Proc_AllTable_Delete (IN `tableName` varchar(255), IN `tableId` varchar(255), IN `id` char(36))
SQL SECURITY INVOKER
COMMENT 'Procedure xóa 1 bản ghi.'
BEGIN
  SET @query = CONCAT('DELETE FROM ', tableName, ' WHERE ', tableId, ' = \'', id, '\'');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_Count`
--
CREATE PROCEDURE Proc_AllTable_Count (IN `tableName` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure để đếm số bản ghi trong 1 bảng.'
BEGIN
  SET @query = CONCAT('SELECT COUNT(1) FROM ', tableName);
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

DELIMITER ;

-- 
-- Dumping data for table report
--
INSERT INTO report VALUES
('00a1399b-6bcf-4797-b13b-230e5e8eee88', 48, 'Thành phố Đà Nẵng', 495, 'Quận Cẩm Lệ', 20260, 'Phường Khuê Trung', 'phạm văn đồng', 1, 9, '2024-10-24 19:25:57', 'Trần Thế Anh', '2024-10-24 22:28:23', 'the anh tr1', '2024-10-12 19:28:58', 'USER UPDATE'),
('8673ca57-1c18-47cd-bdf0-764a0e27156e', 1, 'Thành phố Hà Nội', 277, 'Huyện Chương Mỹ', 10015, 'Thị trấn Chúc Sơn', NULL, 2, 2, '2024-10-24 22:31:57', 'Trần Thế Anh', '2024-10-24 22:31:57', 'anh', '2024-10-24 22:31:57', NULL);

--
-- Restore previous SQL mode
--
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;