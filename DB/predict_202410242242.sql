--
-- Script was generated by Devart dbForge Studio for MySQL, Version 10.0.225.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 10/24/2024 10:42:54 PM
-- Server version: 8.0.39
--

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

--
-- Set SQL mode
--
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8mb4';

--
-- Set default database
--
USE predict;

--
-- Drop procedure `Proc_AllTable_Count`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_Count;

--
-- Drop procedure `Proc_AllTable_Delete`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_Delete;

--
-- Drop procedure `Proc_AllTable_DeleteList`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_DeleteList;

--
-- Drop procedure `Proc_AllTable_GetAll`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetAll;

--
-- Drop procedure `Proc_AllTable_GetAllByColumnName`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetAllByColumnName;

--
-- Drop procedure `Proc_AllTable_GetByCode`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetByCode;

--
-- Drop procedure `Proc_AllTable_GetById`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetById;

--
-- Drop procedure `Proc_AllTable_GetListByColumnValues`
--
DROP PROCEDURE IF EXISTS Proc_AllTable_GetListByColumnValues;

--
-- Drop procedure `Proc_Predict_Filter`
--
DROP PROCEDURE IF EXISTS Proc_Predict_Filter;

--
-- Drop procedure `Proc_Predict_Insert`
--
DROP PROCEDURE IF EXISTS Proc_Predict_Insert;

--
-- Drop procedure `Proc_Predict_Update`
--
DROP PROCEDURE IF EXISTS Proc_Predict_Update;

--
-- Drop table `predict`
--
DROP TABLE IF EXISTS predict;

--
-- Set default database
--
USE predict;

--
-- Create table `predict`
--
CREATE TABLE predict (
  PredictId char(36) NOT NULL,
  ProvinceId int DEFAULT NULL,
  ProvinceName varchar(255) DEFAULT NULL,
  DistrictId int DEFAULT NULL,
  DistrictName varchar(255) DEFAULT NULL,
  WardId int DEFAULT NULL,
  WardName varchar(255) DEFAULT NULL,
  Address varchar(255) DEFAULT NULL,
  CurrentStartDate datetime DEFAULT NULL,
  CurrentEndDate datetime DEFAULT NULL,
  PreviousEndDate datetime DEFAULT NULL,
  PreviousLevelWarningId int DEFAULT NULL,
  CropStateId int DEFAULT NULL,
  PestLevelId int DEFAULT NULL,
  LevelWarningId int DEFAULT NULL,
  SeasonType int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(255) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(255) DEFAULT NULL,
  PRIMARY KEY (PredictId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'bảng dự báo',
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create procedure `Proc_Predict_Update`
--
CREATE PROCEDURE Proc_Predict_Update (IN `v_PredictId` char(36),
IN `v_ProvinceId` int,
IN `v_ProvinceName` varchar(255),
IN `v_DistrictId` int,
IN `v_DistrictName` varchar(255),
IN `v_WardId` int,
IN `v_WardName` varchar(255),
IN `v_Address` varchar(255),
IN `v_CurrentStartDate` datetime,
IN `v_CurrentEndDate` datetime,
IN `v_PreviousEndDate` datetime,
IN `v_PreviousLevelWarningId` int,
IN `v_CropStateId` int,
IN `v_PestLevelId` int,
IN `v_LevelWarningId` int,
IN `v_ModifiedDate` datetime,
IN `v_ModifiedBy` varchar(255),
IN `v_id` char(36))
SQL SECURITY INVOKER
COMMENT 'Procedure cập nhật thông tin dự đoán.'
BEGIN
  UPDATE predict p
  SET p.PredictId = v_PredictId,
      p.ProvinceId = v_ProvinceId,
      p.ProvinceName = v_ProvinceName,
      p.DistrictId = v_DistrictId,
      p.DistrictName = v_DistrictName,
      p.WardId = v_WardId,
      p.WardName = v_WardName,
      p.Address = v_Address,
      p.CurrentStartDate = v_CurrentStartDate,
      p.CurrentEndDate = v_CurrentEndDate,
      p.PreviousEndDate = v_PreviousEndDate,
      p.PreviousLevelWarningId = v_PreviousLevelWarningId,
      p.CropStateId = v_CropStateId,
      p.PestLevelId = v_PestLevelId,
      p.LevelWarningId = v_LevelWarningId,
      p.ModifiedDate = v_ModifiedDate,
      p.ModifiedBy = v_ModifiedBy
  WHERE p.PredictId = v_id;
END
$$

--
-- Create procedure `Proc_Predict_Insert`
--
CREATE PROCEDURE Proc_Predict_Insert (IN `v_PredictId` char(36),
IN `v_ProvinceId` int,
IN `v_ProvinceName` varchar(255),
IN `v_DistrictId` int,
IN `v_DistrictName` varchar(255),
IN `v_WardId` int,
IN `v_WardName` varchar(255),
IN `v_Address` varchar(255),
IN `v_CurrentStartDate` datetime,
IN `v_CurrentEndDate` datetime,
IN `v_PreviousEndDate` datetime,
IN `v_PreviousLevelWarningId` int,
IN `v_CropStateId` int,
IN `v_PestLevelId` int,
IN `v_LevelWarningId` int,
IN `v_CreatedDate` datetime,
IN `v_CreatedBy` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure thêm dự đoán.'
BEGIN
  INSERT INTO predict (PredictId, ProvinceId, ProvinceName, DistrictId, DistrictName, WardId, WardName, Address, CurrentStartDate, CurrentEndDate, PreviousEndDate, PreviousLevelWarningId, CropStateId, PestLevelId, LevelWarningId, CreatedDate, CreatedBy)
    VALUES (v_PredictId, v_ProvinceId, v_ProvinceName, v_DistrictId, v_DistrictName, v_WardId, v_WardName, v_Address, v_CurrentStartDate, v_CurrentEndDate, v_PreviousEndDate, v_PreviousLevelWarningId, v_CropStateId, v_PestLevelId, v_LevelWarningId, v_CreatedDate, v_CreatedBy);
END
$$

--
-- Create procedure `Proc_Predict_Filter`
--
CREATE PROCEDURE Proc_Predict_Filter (IN `v_ProvinceId` int,
IN `v_DistrictId` int,
IN `v_WardId` int,
IN `v_StartDate` datetime,
IN `v_EndDate` datetime,
IN `v_CropStateId` int,
IN `v_PestLevelId` int,
IN `v_SeasonType` int,
IN `v_PageSize` int,
IN `v_PageNumber` int)
SQL SECURITY INVOKER
COMMENT 'Procedure lọc thông tin dự đoán theo điều kiện và trả về tổng số lượng.'
BEGIN
  DECLARE startIndex int;
  SET startIndex = (v_PageNumber - 1) * v_PageSize;

  -- Truy vấn dữ liệu với phân trang
  SELECT
    *
  FROM predict p
  WHERE (v_ProvinceId IS NULL
  OR v_ProvinceId = -1
  OR p.ProvinceId = v_ProvinceId)
  AND (v_DistrictId IS NULL
  OR v_DistrictId = -1
  OR p.DistrictId = v_DistrictId)
  AND (v_WardId IS NULL
  OR v_WardId = -1
  OR p.WardId = v_WardId)
  AND (v_StartDate IS NULL
  OR p.CurrentStartDate >= v_StartDate)
  AND (v_EndDate IS NULL
  OR p.CurrentEndDate <= v_EndDate)
  AND (v_CropStateId IS NULL
  OR v_CropStateId = -1
  OR p.CropStateId = v_CropStateId)
  AND (v_PestLevelId IS NULL
  OR v_PestLevelId = -1
  OR p.PestLevelId = v_PestLevelId)
  AND (v_SeasonType IS NULL
  OR v_SeasonType = -1
  OR p.SeasonType = v_SeasonType)
  LIMIT startIndex, v_PageSize;

  -- Truy vấn tổng số lượng bản ghi
  SELECT
    COUNT(*) AS Total
  FROM predict p
  WHERE (v_ProvinceId IS NULL
  OR v_ProvinceId = -1
  OR p.ProvinceId = v_ProvinceId)
  AND (v_DistrictId IS NULL
  OR v_DistrictId = -1
  OR p.DistrictId = v_DistrictId)
  AND (v_WardId IS NULL
  OR v_WardId = -1
  OR p.WardId = v_WardId)
  AND (v_StartDate IS NULL
  OR p.CurrentStartDate >= v_StartDate)
  AND (v_EndDate IS NULL
  OR p.CurrentEndDate <= v_EndDate)
  AND (v_CropStateId IS NULL
  OR v_CropStateId = -1
  OR p.CropStateId = v_CropStateId)
  AND (v_PestLevelId IS NULL
  OR v_PestLevelId = -1
  OR p.PestLevelId = v_PestLevelId)
  AND (v_SeasonType IS NULL
  OR v_SeasonType = -1
  OR p.SeasonType = v_SeasonType)
  ;
END
$$

--
-- Create procedure `Proc_AllTable_GetListByColumnValues`
--
CREATE PROCEDURE Proc_AllTable_GetListByColumnValues (IN `tableName` varchar(255), IN `columnName` varchar(255), IN `values` text)
SQL SECURITY INVOKER
COMMENT 'Procedure lấy ra danh sách bản ghi theo một chuỗi các giá trị của một trường.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName, ' entity WHERE entity.', columnName, ' IN (', `values`, ')');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetById`
--
CREATE PROCEDURE Proc_AllTable_GetById (IN `tableName` varchar(255), IN `tableId` varchar(255), IN `id` char(36))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy một bản ghi theo id.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName, ' entity WHERE entity.', tableId, ' = \'', id, '\'');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetByCode`
--
CREATE PROCEDURE Proc_AllTable_GetByCode (IN `tableName` varchar(255), IN `tableCode` varchar(255), IN `code` varchar(20))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy bản ghi theo mã code.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName, ' entity WHERE entity.', tableCode, ' = \'', code, '\'');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetAllByColumnName`
--
CREATE PROCEDURE Proc_AllTable_GetAllByColumnName (IN `tableName` varchar(255), IN `columnName` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy tất cả bản ghi của một bảng nhưng chỉ lấy một cột.'
BEGIN
  SET @query = CONCAT('SELECT ', columnName, ' FROM ', tableName);
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_GetAll`
--
CREATE PROCEDURE Proc_AllTable_GetAll (IN `tableName` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure lấy tất cả bản ghi trong 1 bảng.'
BEGIN
  SET @query = CONCAT('SELECT * FROM ', tableName);
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_DeleteList`
--
CREATE PROCEDURE Proc_AllTable_DeleteList (IN `tableName` varchar(255), IN `tableId` varchar(255), IN `ids` text)
SQL SECURITY INVOKER
COMMENT 'Procedure xóa nhiều bản ghi theo id.'
BEGIN
  SET @query = CONCAT('DELETE FROM ', tableName, ' WHERE ', tableId, ' IN (', ids, ')');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_Delete`
--
CREATE PROCEDURE Proc_AllTable_Delete (IN `tableName` varchar(255), IN `tableId` varchar(255), IN `id` char(36))
SQL SECURITY INVOKER
COMMENT 'Procedure xóa 1 bản ghi.'
BEGIN
  SET @query = CONCAT('DELETE FROM ', tableName, ' WHERE ', tableId, ' = \'', id, '\'');
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Create procedure `Proc_AllTable_Count`
--
CREATE PROCEDURE Proc_AllTable_Count (IN `tableName` varchar(255))
SQL SECURITY INVOKER
COMMENT 'Procedure để đếm số bản ghi trong 1 bảng.'
BEGIN
  SET @query = CONCAT('SELECT COUNT(1) FROM ', tableName);
  PREPARE stmt FROM @query;
  EXECUTE stmt;

  /* giải phóng tài nguyên */
  DEALLOCATE PREPARE stmt;
END
$$

DELIMITER ;

-- 
-- Dumping data for table predict
--
INSERT INTO predict VALUES
('3535373c-ad68-4490-94f1-d7b96c2b12b4', 1, 'Thành phố Hà Nội', 282, 'Huyện Mỹ Đức', 10486, 'Xã Đốc Tín', 'Xóm 2', '2024-10-16 22:09:00', NULL, '2024-10-21 22:09:00', 1, 0, 0, 0, 1, '2024-10-24 22:13:24', 'Trần Thế Anh', NULL, NULL),
('f50d0f68-3887-416d-9e75-6a4246135747', 79, 'Thành phố Hồ Chí Minh', 783, 'Huyện Củ Chi', 27502, 'Xã An Phú', '15 Trùng khánh', '2024-10-13 22:23:00', NULL, '2024-10-08 22:23:00', 3, NULL, NULL, NULL, 1, '2024-10-24 22:23:18', 'Trần Thế Anh', '2024-10-24 22:38:23', 'USER UPDATE');

--
-- Restore previous SQL mode
--
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;