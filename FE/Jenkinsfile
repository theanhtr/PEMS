pipeline{
  agent any
  tools{
    nodejs 'Node20'
  }
  environment {
    APP_NAME = "pems-fe"
    DEPLOYMENT_NAME = "pems-fe"
    DOCKER_USER = "theanh0906"
    DOCKER_PASS = "dockerhub-credentials"
    IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
    IMAGE_TAG = "${IMAGE_TAG}"
    ARGO_CREDENTIALS="argocd-credentials"
    ARGO_TOKEN="argocd-token"
    IP_ARGO="172.28.73.189:32295"
    GIT_REPO = "https://github.com/theanhtr/PEMS.git"
    NAME_PROJECT_TEST_ARGO_RESTART="pems-test"
  }
  stages{
    stage('Cleanup workspace'){
      steps{
        cleanWs()
      }
    }
    
    stage('Checkout'){
      steps{
        git branch: "${ENV_BUILD}", credentialsId: 'github-credentials', url: "${GIT_REPO}"
      }
    }

    stage("Build and push docker image"){
      steps{
        dir('FE') {
          script{
            docker.withRegistry('', DOCKER_PASS) {
              docker_image = docker.build("${IMAGE_NAME}", "--build-arg BUILD_ENV_ARG=${ENV_BUILD} .")
            }

            docker.withRegistry('', DOCKER_PASS) {
              docker_image.push("${IMAGE_TAG}")
            }

            sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
          }
        }
      }
    }

    stage("Restart Deployment"){
      steps{
        script{
          withCredentials([
            usernamePassword(credentialsId: "${ARGO_CREDENTIALS}", usernameVariable: 'USER', passwordVariable: 'PASSWORD'),
            string(credentialsId: "${ARGO_TOKEN}", variable: 'TOKEN'),
          ]) {
              sh """
                  argocd login ${IP_ARGO} --username ${USER} --password ${PASSWORD} --insecure --auth-token ${TOKEN}
                  argocd app actions run ${NAME_PROJECT_TEST_ARGO_RESTART} restart --kind Deployment --resource-name ${DEPLOYMENT_NAME} --auth-token ${TOKEN}
              """
          }
        }
      }
    }
  }
}